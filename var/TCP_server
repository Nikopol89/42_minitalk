#include "minitalk.h"

static void	ft_savemsg(t_byte *sigbits, t_byte *byte, siginfo_t *info)
{
	static t_byte	*str;
	t_byte			*tmp;
	static int		i;

	usleep(LONG);
	if ((*sigbits < 32 || *sigbits > 126) && *sigbits != 255)
	{
		ft_printf("- - - ERROR - - -\n");
		kill(info->si_pid, SIGUSR2);
		*sigbits = 0;
		*byte = 128;
		i = 0;
		if (str)
			free(str);
		exit (0);
	}
	if (*sigbits == ACK)
	{
		ft_printf("%s\n- - - EOT from %d - - -\n", str, info->si_pid);
		free(str);
		*sigbits = 0;
		i = 0;
		*byte = 128;
		kill(info->si_pid, SIGUSR1);
	}
	else
	{
		tmp = str;
		str = ft_calloc(i + 2, sizeof(*str));
		if (!ft_memcpy(str, tmp, i))
			exit (0);
		str[i] = *sigbits;
		if (i)
			free(tmp);
		*sigbits = 0;
		*byte = 128;
		i++;
		kill(info->si_pid, SIGUSR1);
	}
}

static void	ft_decode(int sig, siginfo_t *info, void *ucontext)
{
	static t_byte	sigbits;
	static t_byte	byte;

	(void)ucontext;
	if (!byte)
		byte = 128;
	if (sig == SIGUSR1)
		sigbits |= 1;
	byte >>= 1;
	if (byte)
		sigbits <<= 1;
	else
		ft_savemsg(&sigbits, &byte, info);
}

int	main(void)
{
	struct sigaction	act_usr1;
	struct sigaction	act_usr2;

	act_usr1.sa_sigaction = &ft_decode;
	act_usr2.sa_sigaction = &ft_decode;
	act_usr1.sa_flags = SA_SIGINFO;
	act_usr2.sa_flags = SA_SIGINFO;
	sigemptyset(&act_usr1.sa_mask);
	sigemptyset(&act_usr2.sa_mask);
	sigaddset(&act_usr1.sa_mask, SIGUSR2);
	sigaddset(&act_usr2.sa_mask, SIGUSR1);
	sigaction(SIGUSR1, &act_usr1, NULL);
	sigaction(SIGUSR2, &act_usr2, NULL);
	ft_printf("PID: %d\n", getpid());
	while (1)
	{}
	return (0);
}
